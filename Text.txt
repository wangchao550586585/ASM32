lib:链接库是一个文件,其中包含已经编译成机器码的过程
dll:动态链接库

value BYTE ?	;由可执行指令在运行时为变量动态赋值
续行符,把2行连接成一条程序语句
greeting \
	BYTE "welcome"

BYTE/SBYTE <==>DB
WORD/SWORD <==>DW 定义无/有符号字
DWORD/SDWORD <==>DD 定义双字无/有符号双字
QWORD <==>DQ 定义8字节
TBYTE<==>DT 定义10字节,对这类操作需要浮点指令集中的特殊指令
REAL4/8/10:单/双/扩展精度实数,DD,DQ,DT也可以定义

.data可以再.code中定义,但是编译时单独存放在数据段中
.DATA?:声明未初始化数据,定义大块的未初始化数据可以减少编译后的程序尺寸
$运算符:返回当前程序语句的地址偏移值
list BYTE 10,20
ListSize=($-list),必须$紧跟list后

=:可重复定义
n=1
n=n+1


EQU:伪指令将符号名同整数表达式or任意文本联系起来,编译器在后面遇到EQU定义名字,就用该名字代表的整数值or文本替代,定义的name
不能重定义
name EQU expression
name EQU symbol(必须是=orEQU定义的符号名)
name EQU <text>
a EQU 10*10		M1 WORD a解析成 M1 WORD 100
b EQU <10*10>	M2 WORD b解析成 M2 WORD 10*10

TEXTEQU:创建文本宏,可重定义
name TEXTEQU <text>
name TEXTEQU textmacro,将已定义的文本宏赋给符号
name TEXTEQU %constExpr 整数表达式常量赋给符号
rowSize=5
count TEXTEQU %(rowSize*2)
move TEXTEQU <mov>
setupAL TEXTEQU <move al,count> 汇编成 mov al,10

mov:
mov reg,reg
mov mem,reg
mov reg,mem
mov mem,imm
mov reg,imm

movzx:将源操作数的内容复制到目的操作数中,并将该值零扩展至16/32位,仅适合无符号整数
movsx:有符号整数
LAHF/SAHF:将EFLAGS寄存器的低字节复制到AH寄存器,符号标志,零标志,辅助进位标志,奇偶标志和进位标志,SAHF相反
XCHG:交换2个操作数内容

sub/add:影响EFLAG寄存器
neg:将数字转换为对应的补码,变成相反数

OFFSET:返回一个变量相对于其所在段开始的偏移
PTR:允许重载变量的默认尺寸
TYPE:返回数组中每个元素的大小(字节计算)
LENGTHOF:返回数组内元素的数目,元素由出现在同一行的值(作为其标号)定义
SIZEOF:返回数组初始化时占用的字节数,
LABEL:允许插入一个标号,并赋予其尺寸属性而无须分配任何实际的存储空间
ALIGH 边界值:将变量的位置按字节,字,双字or段边界对齐,空字节填充位数,CPU处理存储在偶数地址处的数据比处理存储在奇地址数据块

间接寻址:使用寄存器作为指针并操作寄存器的值,可以用offset获得地址
间接操作数:操作数使用间接寻址时
	保护模式,EAX,EBX,ECX,EDX,ESI,EDI,EBP,ESP
	实地址模式:SI,DI,BX,BP(用来寻址堆栈)
变址操作数:把常量和寄存器相加以得到一个有效地址
constant[reg] | [constant+reg]

指针
包含其它变量地址的变量
							16位模式 32位模式
NEAR	相对开始段开始的16位偏移地址	相对开始段开始的32位偏移地址	
FAR		32位的段-偏移地址	48位的段选择子-偏移地址

TYPDEF:允许创建用户自定义的类型,通常在数据段之前
PBYTE TYPDEF PTR BYTE			;创建了一个新的数据类型,指向字节的指针PBYTE

pop/push:压入/弹出32/16位寄存器,保护模式弹入/出32位值,实地址模式则根据处理器选择32/16,默认16
pushfd/popfd:压入/弹出32位EFLAGS寄存器值
pushf/popf:压入/弹出16位FLAGS寄存器值
pushad/pusha:压入32/16位寄存器,EAX,ECX,EDX,EBX,ESP,EBP,ESI,EDI
popad/popa:与上相反

USES:与PROC配套使用,保存以及还原寄存器

布尔指令
AND/OR/XOR/NOT(反码)
以下格式不允许,其余都可以
AND mem,mem
AND imm,mem|imm|reg

TEST:在源操作数和目的操作数之间进行"与"运算,只设置相应的CPU标志
BT/BTC/BTR/BTS:bit testing位测试指令
BT:选择第一个操作数的n位,复制到进位标志中
BT bitBase,n
格式如下:
BT r/m16,r16
BT r/m32,r32
BT r/m16,imm8
BT r/m32,imm8

BTC:位测试并取反格式与BT一样,选择第一个操作数的N位,复制到进位标志,同时对N位取反
BTR:bit test and reset 位测试并复位,N清零
BTS:位测试并置位,置1


jc/jnc:进位/无进位跳转
jz/jnz:为/非0跳转
MASM默认要求跳转的目的地址在当前的过程之内,可以设置一个全局标号(标号后面跟"::")突破此限制

JCXZ/JECXZ:CX/ECX=0则跳转
JE<==>JZ	JNE<==>JNZ

LOOPZ<==>LOOPE,ECX!=0&ZF=1
LOOPNZ<==>LOOPNE,ECX!=0&ZF=0

有限状态机:依据输入改变状态的机器or程序,可以用有向图表示
.IF:默认无符号比较,如果比较的值中包含有符号变量,则有符号比较


SHL reg,imm8
SHL reg,CL
SHL mem,imm8
SHL mem,CL
SHL/SHR:逻辑左/右移,移出最高位/最低位送入CF
SAL/SAR:算术左/右移,最后移出的位用原来的符号位填充,移出最高位/最低位送入CF,格式同上,可进行有符号数的除以2的次幂操作
ROL/ROR:循环左/右移,向左移动一位后,把最高位同时复制到进位标志和最低位中,格式同上,可交换左右位
RCL/RCR:带进位的循环左/右移,每位左移一位后,把进位标志复制到最低有效位中,最高有效位复制到进位标志,可用来进行多个双字移位
SHLD/SHRD:双精度左/右移,把目的操作数左/右移指定的位数,空出来的位用源操作数的高/低位来填充
SHLD reg16,reg16,CL/imm8
SHLD reg32,reg32,CL/imm8
SHLD mem16,reg16,CL/imm8
SHLD mem32,reg32,CL/imm8
在使用移位和循环移位对一个有符号整数移位一位后得到的值,如果溢出则重置溢出标志位

乘法和除法
不接受立即数,积是乘数/被乘数大小的二倍,如果积的高半部分不为0,设置进位和溢出标志
MUL/DIV:无符号整数乘除


被乘数		乘数			积
AL			r/m8			AX
AX			r/m16			DX:AX
EAX			r/m32			EDX:EAX

被除数		除数			商				余数
AX			r/m8			AL				AH
DX:AX		r/m16			AX				DX
EDX:EAX		r/m32			EAX				EDX

-----------------
IMUL/IDIV:有符号整数乘除
被除数进行除法之前需要进行符号扩展
CBW/CWD/CDQ:扩展AL/AX/EAX符号位到AH/DX/EDX,保留数字符号

单操作数,如果乘积高半部分不是低半部分的符号扩展,进位和溢出标志置位
被乘数		乘数			积
AL			r/m8			AX
AX			r/m16			DX:AX
EAX			r/m32			EDX:EAX

双操作数,如果有效位丢失,进位和溢出标志置位
被乘数		乘数		
r16			r/m16/imm8/imm16				
r32			r/m32/imm8/imm32

三操作数,如果有效位丢失,进位和溢出标志置位
被乘数		乘数						
r16			r/m16		imm8/imm16		
r32			r/m32		imm8/imm32


----------------------

ADC
ADC reg,reg/mem/imm
ADC mem,reg/imm


-------------ASCII和未压缩十进制算术指令
3402显示如下,16进制显示
ACSII 33 34 30 32
未压缩十进制:03 04 00 02

ASCII加减可是ASCII格式或未压缩的十进制,乘除法只能用未压缩的十进制
计算和显示方法
1:2操作数转换成二进制并相加,然后二进制转换成ASCII码数字串
2:连续把每对ASCII码数字相加,和就是ASCII数字串

AAA:加法之后进行ASCII码调整	
AAS:减法之后进行ASCII码调整
AAM:乘法之后进行ASCII码调整
AAD:除法之后进行ASCII码调整

ASCII码十进制数中高4位总是0011b,而未压缩的十进制高4位是0,整数类型按每字节存储一个数字
ASCII算术运算相比二进制算术指令执行慢,但优点如下
1:在运算之前不需要进行字符串到二进制转换
2:可以使用假想的小数点进行实数运算,可避免使用浮点数时因近似产生的错误

--------压缩十进制算术指令
每字节存储2个十进制数字,每个十进制数字用4个数据位表示,压缩的十进制数字个数是偶数,最高位0填充
DAA:把AL中的二进制和转换压缩的十进制数格式
DAS:将SUB或SBB指令执行后AL中的二进制结果转换成压缩的十进制数格式
压缩十进制显示如下:
QWORD 123456h		;123,456十进制
mov al,35h
add al,48h		;AL=7DH
daa				;AL=83H

-----------------------------------------------第八章
LEA:返回间接操作数的偏移地址
ENTER numbytes,nestinglevel
	numbytes:指定为局部变量保留多少堆栈空间,总是向上取整为4的倍数,以使ESP按双字边界地址对齐
	nestinglevel:决定了从调用过程复制到当前堆栈框架中的堆栈框架指针的数目
LEAVE:还原ENTER
LOCAL:必须紧跟PROC,声明一个or多个命名局部变量,并同时赋予变量相应的尺寸属性
	需要保证堆栈空间足够,可使用.stack 4096,表示分配4096堆栈空间
	由于堆栈偏移是32位的,所以每次分配4空间
	对于8位变量,在第一个可用的字节处为其分配空间
	对于16位变量,在第一个可用的偶数地址分配
	对于32位变量,在第一个可用的双字对齐边界地址处为其分配
	
	WriteStackFrame:显示当前过程的堆栈内容,过程的堆栈参数,返回地址,局部变量以及保存的寄存器
	WriteStackFrameName：多了一个参数用于存放拥有堆栈框架的过程的名字

.MODEL:决定程序内存模式模型,过程命名方案和参数传递预定
	.MODEL 内存模型[,模式选项]
	模式选项可包含语言选项关键字or堆栈的远近选项
		语言选项决定了过程和公共符号的调用约定及命名约定,如STUDCALL,C,创建与这些语言兼容的汇编程序
			STUCALL:指定过程按照从最后一个到第一个的反向顺序压入参数
				AddTwo(5,6) == > push 6,push 5,call AddTwo
				STUCALL要求过程在ret指令后面提供一个常量操作数,ret在堆栈上弹出返回地址后把该常量同ESP相加
				STUCALL把导出的过程名修改为_name@过程参数的字节数(4的倍数)
			C语言关键字要求过程参数以反向顺序压栈,但是过程调用后堆栈参数移除任务调用者负责,而不是ret 常数
		堆栈的远近选项既可以是NEARSTACK(把程序的堆栈段和数据段合并成一个物理段),FARSTACK(对于堆栈段和数据段使用不同物理段)
	
-------8.6创建多模块程序
源码模块中隐藏过程名,在程序启动模块中main需要public
1:mySub PROC PRIVATE
2:OPTION PROC:PRIVATE		文件头部声明默认所有过程私有
	PUBLIC main,method2	指定导出的过程


----------------第九章,字符串和数组
重复前缀
REP:当ECX>0时重复
REPZ/REPE:0标志置位且ECX>0时重复
REPNZ/REPNE:0标志清零且ECX>0时重复

MOVSB/MOVSW/MOVSD:分别从SI复制字节/字/双字到DI,和重复前缀配合使用
CMPSB/CMPSW/CMPSD:分别将ESI和EDI指向内存操作数比较,分别比较字节,字,双字,和重复前缀配合使用
CMPS显示格式:提供2个间接操作数,使用PTR指明操作数大小
	CMPS DWORD PTR [esi],[edi]
SCASB,SCASW,SCASD:把AL/AX/EAX中的值同由EDI寻址的目标内存中的字节,字,双字比较
STOSB,STOSW,STOSD:把AL/AX/EAX中的值存储在EDI指向的内存单元中,同时EDI的值根据方向标志的增加或减少,可同REP联合使用
LODSB,LODSW,LODSD:从ESI指向的内存位置向AL/AX/EAX存入值,同时ESI值根据方向标志增加or减少

ECX=0结尾的,SI/DI加一才是SI/DI初始位置

---二维数组
2种方式表示
	1:行主序存储,第一行放在内存块开始,第一行最后一个元素后	接第二行的第一个元素
	2:列主序存储,第一列放在内存块开始,第一列最后一个元素后接第二行第一个元素
基址变址操作数:[base+index]
相对基址变址操作数:偏移[base+index] or [base+index+偏移],偏移可是数组名字


-------------------第十章
---------结构
名字 STRUCT
	域的声明
名字 ENDS
为了最佳IO性能,结构的成员应该根据其数据类型进行对齐,如双子成员应该对齐在双字地址边界上
ALIGH datatye:设置下一个域or变量的地址对齐方式
.data		
ALIGH DWORD		;myVar对齐在双字地址边界上
myVar DWORD ?

SIZEOF/TYPE	结构名:返回结构体占用字节

-----------联合,10A.asm

-----------宏
位置:数据段之前
定义
	macroname MACRO parameter-1,parameter-2...
		statement-list
	END

-----------宏函数
与宏过程不同的是,宏函数总是EXITM返回一个常量(整数or字符串)


----------条件汇编伪指令
和.IF.ENDIF不同,.IF是基于存储在寄存器或变量中的运行时值对表达式求值的,而此命令是在编译时求值的
IF condition
	statements
ELSE
	statements
ENDIF

-----------特殊操作符
&将宏内部对宏参数的引用替换为调用时的实际值
@LINE:行号
%展开文本宏or把常量表达式转换成文本表示形式
count=10
sumVal TEXTEQU %(5+count)		;%对5+count求值并返回整数15(作为文本)
mGotoxyConst %(65*10),%(3+4)	;求值后以文本形式传递

%放行首,则在该行发现的所有文本宏和宏函数都展开
ECHO (SIZEOF array) bytes		翻译成(SIZEOF array) bytes	
ECHO %(SIZEOF array) bytes		翻译成%(SIZEOF array) bytes	
TempStr TEXTEQU %(SIZEOF array)
% ECHO TempStr					翻译成 %(SIZEOF array)的实际值

<>:把<>里的多个字符or符号作为一个字符串整体传递
mWrite <"Line ",0dh,0ah>
!:强制预处理器把预定义的操作符字符作为普通的字符
mWrite <"Line ",0dh,0ah !> >

----------定义重复块
WHILE,REPEAT,FOR,FORC，只能用于汇编期间,只能使用常量值作为循环条件和计数器

-------------------------------------十一章
句柄:是一个32位的无符号整数,唯一标识一个对象,如:位图,画笔或者某个输入输出设备

-------------------------------------十二章
使用__asm与C++程序内联,12B_ENCODE
	需要用到的指令:__asm
在保护模式下与C++程序链接(外联),12C_Find
	需要用到的指令:model,PROTO,extern
汇编调用C++,调用C/C++库时,必须从C/C++的主模式启动程序以运行库的初始化代码
		且汇编语言中调用C++函数,必须定义extern "C"
		如果使用了irvine32链接库,因为model使用的是STDCALL,所以在PROTO后面添加C修饰符
		汇编语言要是有被C++调用的过程,则PROC后面也需要添加C
		指定model flat,C 则不需要在PROTO和PROC添加C修饰符

-------------------------------------十三章
用命令行向程序传递信息,命令行上的任何文本自动存储在一个128字节的MS-DOS命令行区域中
ES:80h处该内存区域称之为程序段前缀,
第一个字节是命令行长度,如果>0,则第二个字节是空格(20h),
后面跟命令行实际键盘输入的字符
在使用重定向输入输出时(程序 > 文件名),MS-DOS不保存使用的文件和设备名


------------------------------------十五章
MS-DOS中标准文本字体是8像素宽,16像素高
字符X坐标=字符坐标X*8

------------------------------------十六章
显示段定义
段名 SEGMENT [对齐方式] [组合方式] ['类']
	语句
段名 ENDS
对齐方式:BYTE,WORD,DWORD,PARA,PAGE
组合方式:PRIVATE,PUBLIC,STACK,COMMON,MEMORY,AT地址
类:用单括号括起的用于标识特定类型段的名字,如CODE/STACK等
段名:可唯一,可重复
对齐(定位)方式:
	默认PARA,表示段从以16字节对齐的边界开始,如段地址是0A00,以16字节对齐则是0A000,对齐方式只影响要连接在现存段后面的段
	BYTE/WORD/DWORD/PAGE:1/2/4/256字节
	8086/80286处理器,使用WORD最好,因为处理器的数据总线是16位的,每次读取2字节,所以第一个字节必须偶数,这样只需要一次内存读操作
组合方式:通知链接器以何种方式组合有相同名字的段
	PRIVATE:默认组合方式,表示段不和其他段进行组合
	PUBLIC/MEMORY:使链接器把该段和其他所有具有相同组合类型的同名段进行组合
	具体查看段的组合方式

ASSUME告诉汇编器如何在编译时计算段中变量和标号的偏移地址
段超越前缀指令前一个字节的前缀,指示处理器在计算有效地址时使用不同于ASSUME伪指令指定的另外一个不同的段寄存器
	可以使用段超越前缀访问其他段内变量,而不是当前以DS为默认寄存器的段内变量
多次引用另外一个段内的变量,应该插入ASSUME改变默认段引用方式
ASSUME ds:AltSeg	;暂时使用段AltSeg
mov ax,AltSeg
mov ds,ax
ASSUME ds:data	;使用默认的段data
mov ax,ds
mov ds,ax

不同模块源代码,也可以组合在同一个段中,只要对不同模块内的段使用同样的名字并全部指定PUBLCI组合方式即可.

使用IO端口控制硬件
IA-32系统提供了2种硬件输入输出方式
内存映射方式:程序直接向特定内存地址写入数据,数据自动传送至设备,相反从预定于的内存地址复制数据,则可以从输入设备读取数据
基于端口方式
	in 累加器,端口
	out 端口,累加器
	端口可以是0-FFh之间的一个常量,或者0-FFFFh之间的值的DX寄存器
	累加器必须是AL(8位传输),AX(16位传输),EAX(32位传输)

------------------------------------十七章
浮点指令:F开头,第二字母B(二/十进制BCD操作数)/I(二进制整数操作数),未指定默认实数格式
初始化:FINIT初始化浮点单元,FPU控制字设为037Fh,掩盖所有的浮点异常,近似方法设置为最接近的偶数,计算精度设为64位,程序开始时调用

